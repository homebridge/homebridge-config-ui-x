diff --git a/node_modules/@zajsf/core/fesm2022/zajsf-core.mjs b/node_modules/@zajsf/core/fesm2022/zajsf-core.mjs
index 26fb374..357543c 100644
--- a/node_modules/@zajsf/core/fesm2022/zajsf-core.mjs
+++ b/node_modules/@zajsf/core/fesm2022/zajsf-core.mjs
@@ -6684,6 +6684,9 @@ class JsonSchemaFormService {
     }
     setArrayItemTitle(parentCtx = {}, childNode = null, index = null) {
         const parentNode = parentCtx.layoutNode;
+        if (parentNode.options.buttonText) {
+            return parentNode.options.buttonText;
+        }
         const parentValues = this.getFormControlValue(parentCtx);
         const isArrayItem = (parentNode.type || '').slice(-5) === 'array' && isArray(parentValues);
         const text = JsonPointer.getFirst(isArrayItem && childNode.type !== '$ref'
@@ -7170,7 +7173,7 @@ class CheckboxComponent {
     static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.4", type: CheckboxComponent, selector: "checkbox-widget", inputs: { layoutNode: "layoutNode", layoutIndex: "layoutIndex", dataIndex: "dataIndex" }, ngImport: i0, template: `
     <label
       [attr.for]="'control' + layoutNode?._id"
-      [class]="options?.itemLabelHtmlClass || ''">
+      [class]="options?.itemLabelHtmlClass || ' hb-uix-switch'">
       <input *ngIf="boundControl"
         [formControl]="formControl"
         [attr.aria-describedby]="'control' + layoutNode?._id + 'Status'"
@@ -7197,6 +7200,7 @@ class CheckboxComponent {
       <span *ngIf="options?.title"
         [style.display]="options?.notitle ? 'none' : ''"
         [innerHTML]="options?.title"></span>
+      <span class="hb-uix-slider hb-uix-round"></span>
     </label>`, isInline: true, dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }] }); }
 }
 i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.4", ngImport: i0, type: CheckboxComponent, decorators: [{
@@ -7207,7 +7211,7 @@ i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.4", ngImpor
                     template: `
     <label
       [attr.for]="'control' + layoutNode?._id"
-      [class]="options?.itemLabelHtmlClass || ''">
+      [class]="options?.itemLabelHtmlClass || ' hb-uix-switch'">
       <input *ngIf="boundControl"
         [formControl]="formControl"
         [attr.aria-describedby]="'control' + layoutNode?._id + 'Status'"
@@ -7234,6 +7238,7 @@ i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.4", ngImpor
       <span *ngIf="options?.title"
         [style.display]="options?.notitle ? 'none' : ''"
         [innerHTML]="options?.title"></span>
+      <span class="hb-uix-slider hb-uix-round"></span>
     </label>`,
                 }]
         }], ctorParameters: function () { return [{ type: JsonSchemaFormService }]; }, propDecorators: { layoutNode: [{
@@ -7285,7 +7290,7 @@ class CheckboxesComponent {
         [attr.for]="'control' + layoutNode?._id + '/' + checkboxItem.value"
         [class]="(options?.itemLabelHtmlClass || '') + (checkboxItem.checked ?
           (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :
-          (' ' + (options?.style?.unselected || '')))">
+          (' ' + (options?.style?.unselected || ' hb-uix-switch')))">
         <input type="checkbox"
           [attr.required]="options?.required"
           [checked]="checkboxItem.checked"
@@ -7297,6 +7302,7 @@ class CheckboxesComponent {
           [value]="checkboxItem.value"
           (change)="updateValue($event)">
         <span [innerHTML]="checkboxItem.name"></span>
+        <span class="hb-uix-slider hb-uix-round"></span>
       </label>
     </div>
 
@@ -7307,7 +7313,7 @@ class CheckboxesComponent {
           [attr.for]="'control' + layoutNode?._id + '/' + checkboxItem.value"
           [class]="(options?.itemLabelHtmlClass || '') + (checkboxItem.checked ?
             (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :
-            (' ' + (options?.style?.unselected || '')))">
+            (' ' + (options?.style?.unselected || ' hb-uix-switch')))">
           <input type="checkbox"
             [attr.required]="options?.required"
             [checked]="checkboxItem.checked"
@@ -7319,6 +7325,7 @@ class CheckboxesComponent {
             [value]="checkboxItem.value"
             (change)="updateValue($event)">
           <span [innerHTML]="checkboxItem?.name"></span>
+          <span class="hb-uix-slider hb-uix-round"></span>
         </label>
       </div>
     </div>`, isInline: true, dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] }); }
@@ -7340,7 +7347,7 @@ i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.4", ngImpor
         [attr.for]="'control' + layoutNode?._id + '/' + checkboxItem.value"
         [class]="(options?.itemLabelHtmlClass || '') + (checkboxItem.checked ?
           (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :
-          (' ' + (options?.style?.unselected || '')))">
+          (' ' + (options?.style?.unselected || ' hb-uix-switch')))">
         <input type="checkbox"
           [attr.required]="options?.required"
           [checked]="checkboxItem.checked"
@@ -7352,6 +7359,7 @@ i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.4", ngImpor
           [value]="checkboxItem.value"
           (change)="updateValue($event)">
         <span [innerHTML]="checkboxItem.name"></span>
+        <span class="hb-uix-slider hb-uix-round"></span>
       </label>
     </div>
 
@@ -7362,7 +7370,7 @@ i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.4", ngImpor
           [attr.for]="'control' + layoutNode?._id + '/' + checkboxItem.value"
           [class]="(options?.itemLabelHtmlClass || '') + (checkboxItem.checked ?
             (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :
-            (' ' + (options?.style?.unselected || '')))">
+            (' ' + (options?.style?.unselected || ' hb-uix-switch')))">
           <input type="checkbox"
             [attr.required]="options?.required"
             [checked]="checkboxItem.checked"
@@ -7374,6 +7382,7 @@ i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.4", ngImpor
             [value]="checkboxItem.value"
             (change)="updateValue($event)">
           <span [innerHTML]="checkboxItem?.name"></span>
+          <span class="hb-uix-slider hb-uix-round"></span>
         </label>
       </div>
     </div>`,
@@ -8244,7 +8253,7 @@ class SectionComponent {
         [class]="options?.labelHelpBlockClass || ''"
         [innerHTML]="options?.description"></p>
       </div>
-    </fieldset>`, isInline: true, styles: [".legend{font-weight:700}.expandable>legend:before,.expandable>label:before{content:\"\\25b6\";padding-right:.3em}.expanded>legend:before,.expanded>label:before{content:\"\\25bc\";padding-right:.2em}\n"], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: RootComponent, selector: "root-widget", inputs: ["dataIndex", "layoutIndex", "layout", "isOrderable", "isFlexItem"] }] }); }
+    </fieldset>`, isInline: true, styles: [".legend{font-weight:700}.expandable > legend, .expandable > label, .expanded > legend, .expanded > label  {cursor: pointer;}.expandable > legend:before, .expandable > label:before  {font-weight: 900;font-family: 'Font Awesome 5 Free';content: '\\f054';padding-right: .3em;}.expanded > legend:before, .expanded > label:before  {font-weight: 900;font-family: 'Font Awesome 5 Free';content: '\\f078';padding-right: .2em;}\n"], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: RootComponent, selector: "root-widget", inputs: ["dataIndex", "layoutIndex", "layout", "isOrderable", "isFlexItem"] }] }); }
 }
 i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.4", ngImport: i0, type: SectionComponent, decorators: [{
             type: Component,
@@ -8309,7 +8318,7 @@ i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.4", ngImpor
         [class]="options?.labelHelpBlockClass || ''"
         [innerHTML]="options?.description"></p>
       </div>
-    </fieldset>`, styles: [".legend{font-weight:700}.expandable>legend:before,.expandable>label:before{content:\"\\25b6\";padding-right:.3em}.expanded>legend:before,.expanded>label:before{content:\"\\25bc\";padding-right:.2em}\n"] }]
+    </fieldset>`, styles: [".legend{font-weight:700}.expandable > legend, .expandable > label, .expanded > legend, .expanded > label  {cursor: pointer;}.expandable > legend:before, .expandable > label:before  {font-weight: 900;font-family: 'Font Awesome 5 Free';content: '\\f054';padding-right: .3em;}.expanded > legend:before, .expanded > label:before  {font-weight: 900;font-family: 'Font Awesome 5 Free';content: '\\f078';padding-right: .2em;}\n"] }]
         }], ctorParameters: function () { return [{ type: JsonSchemaFormService }]; }, propDecorators: { layoutNode: [{
                 type: Input
             }], layoutIndex: [{
@@ -8330,6 +8339,16 @@ class SelectComponent {
         this.options = this.layoutNode.options || {};
         this.selectList = buildTitleMap(this.options.titleMap || this.options.enumNames, this.options.enum, !!this.options.required, !!this.options.flatList);
         this.jsf.initializeControl(this);
+        this.valueChanges = this.formControl.valueChanges.subscribe((change) => {
+            if (change === 'null') {
+                this.formControl.setValue(null);
+            }
+        });
+    }
+    ngOnDestroy() {
+        if (this.valueChanges) {
+            this.valueChanges.unsubscribe();
+        }
     }
     updateValue(event) {
         this.jsf.updateValue(this, event.target.value);
